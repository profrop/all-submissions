# -*- coding: utf-8 -*-
"""assignment 15 submission

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tdq5Nwn5qwcWfb3ezfel2nH-I1YP3z25
"""

#challenge 1:recur_factorial

def recur_factorial(n):
    """
    n: int >= 0

    Returns the factorial of n using recursion.
    Hint: Base case is when n == 0. In the recursive case, return n * factorial(n-1).
    """
    # Base case
    if n == 0:
        return 1
    # Recursive case
    return n * recur_factorial(n - 1)


# Examples
print(recur_factorial(0))
print(recur_factorial(5))
print(recur_factorial(7))

#challenge 1: is_palindrome_recur

def is_palindrome_recur(s):
    """
    s: string

    Returns True if s is a palindrome using recursion, False otherwise.
    Hint: A string is a palindrome if the first and last characters are equal
    and the substring in between is also a palindrome.
    """
    # Base case: empty string or 1 character â†’ palindrome
    if len(s) <= 1:
        return True

    # Recursive case: check first and last, then recurse on middle
    if s[0] == s[-1]:
        return is_palindrome_recur(s[1:-1])
    else:
        return False


# Examples
print(is_palindrome_recur("racecar"))
print(is_palindrome_recur("hello"))
print(is_palindrome_recur("madam"))